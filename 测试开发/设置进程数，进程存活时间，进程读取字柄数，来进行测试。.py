import multiprocessing
import time
import argparse
import os


def get_parser():
    parser = argparse.ArgumentParser(description="argparse")
    parser.add_argument('--processes_num', type=int, help="进程数")
    parser.add_argument('--duration', type=int, help="持续时间(秒)")
    parser.add_argument('--handle', type=int, help="每个进程打开的文件句柄数")
    return parser.parse_args()


def process_task(all_file_name, duration, handle_num):
    process_id = multiprocessing.current_process().pid
    print(f"Process ID: {process_id} started.")

    # 创建并打开指定数量的文件句柄
    file_handles = []
    for i in range(handle_num):
        filename = f"process_{process_id}_{i}.txt"
        file_handle = open(filename, 'w')
        file_handles.append(file_handle)
        all_file_name.append(filename)

        # 写入1000行数据到每个文件
        # for j in range(1000):
        #     file_handle.write(f"{j}\n")

    print(f"Process ID: {process_id} has opened {handle_num} file handles.")

    # 持续指定时间，但在此期间不关闭文件句柄
    time.sleep(duration)

    print(f"Process ID: {process_id} ended after {duration} seconds.")

    # 注意：这里不关闭文件句柄，它们将在进程结束时自动关闭
    # 如果需要手动关闭，可以在这里添加 file_handle.close() 调用


def create_processes(processes_num, duration, handle_num):
    processes = []
    # 使用 Manager 创建共享列表
    manager = multiprocessing.Manager()
    all_file_name = manager.list()

    for _ in range(processes_num):
        p = multiprocessing.Process(target=process_task, args=(all_file_name, duration, handle_num))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()
    # 主进程中打印共享列表的内容
    print("wait 10 second")
    time.sleep(10)
    print("Start deleting the files generated by this program")
    print(f"all: {all_file_name}")

    # 删除生成的文件
    for filename in all_file_name:
        try:
            os.remove(filename)
            print(f"Deleted file: {filename}")
        except OSError as e:
            print(f"Error deleting file {filename}: {e}")
    print("The files generated by this program are deleted")


if __name__ == "__main__":
    args = get_parser()
    processes_num = args.processes_num
    duration = args.duration
    handle_num = args.handle
    create_processes(processes_num=processes_num, duration=duration, handle_num=handle_num)

# 运行示例
# python test.py --processes_num 2 --duration 10 --handle 3